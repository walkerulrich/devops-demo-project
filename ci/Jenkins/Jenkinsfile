pipeline {
    agent any
    
    parameters {
        string(
            name: 'build_version', 
            defaultValue: 'v1.0', 
            description: 'Build version to use for Docker image'
        )
    }
    
    environment {
        SONAR_URL = "http://localhost:9000"
        DOCKER_IMAGE = "ynsenhub/demo-java-app:${params.build_version}"
        GIT_REPO_NAME = "devops-demo-project"
        GIT_USER_NAME = "walkerulrich"
        GIT_EMAIL = "walkerulrich.tchabo@gmail.com"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Checking out source code..."
                git branch: 'main', url: 'https://github.com/walkerulrich/devops-demo-project'
                sh 'ls -ltr'
            }
        }
        
        stage('Build and Test') {
            steps {
                echo "üèóÔ∏è Building and testing the application..."
                sh '''
                    cd demo-java-app
                    echo "Current directory: $(pwd)"
                    echo "Maven version: $(mvn -version)"
                    mvn clean package -DskipTests=false
                '''
            }
            post {
                always {
                    // Archive test results
                    publishTestResults testResultsPattern: 'demo-java-app/target/surefire-reports/*.xml'
                    // Archive artifacts
                    archiveArtifacts artifacts: 'demo-java-app/target/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Static Code Analysis') {
            steps {
                echo "üîç Running SonarQube analysis..."
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd demo-java-app
                        mvn sonar:sonar \
                            -Dsonar.login=$SONAR_AUTH_TOKEN \
                            -Dsonar.host.url=$SONAR_URL \
                            -Dsonar.projectKey=demo-java-app \
                            -Dsonar.projectName="Demo Java App"
                    '''
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                echo "üê≥ Building and pushing Docker image..."
                script {
                    // Build Docker image
                    sh """
                        cd demo-java-app
                        echo "Building Docker image: ${DOCKER_IMAGE}"
                        docker build -t ${DOCKER_IMAGE} .
                        docker tag ${DOCKER_IMAGE} ynsenhub/demo-java-app:latest
                    """
                    
                    // Push to Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                            docker push ${DOCKER_IMAGE}
                            docker push ynsenhub/demo-java-app:latest
                            docker logout
                        '''
                    }
                }
            }
            post {
                always {
                    // Clean up local images
                    sh '''
                        docker rmi ${DOCKER_IMAGE} || true
                        docker rmi ynsenhub/demo-java-app:latest || true
                    '''
                }
            }
        }
        
        stage('Update Deployment File') {
            steps {
                echo "üìù Updating Helm values file..."
                withCredentials([string(credentialsId: 'github_Devops', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        # Configure Git
                        git config user.email "${GIT_EMAIL}"
                        git config user.name "${GIT_USER_NAME}"
                        
                        # Check current values
                        echo "Current values.yaml content:"
                        cat helm/app/values.yaml
                        
                        # Update the image tag
                        sed -i "s/tag:.*/tag: '${build_version}'/" helm/app/values.yaml
                        
                        # Verify the change
                        echo "Updated values.yaml content:"
                        cat helm/app/values.yaml
                        
                        # Commit and push changes
                        git add helm/app/values.yaml
                        git commit -m "üöÄ Update deployment image to version ${build_version} [skip ci]"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo "üßπ Cleaning up workspace..."
            cleanWs()
        }
        success {
            echo "‚úÖ Pipeline completed successfully!"
            // You can add notifications here (Slack, Email, etc.)
        }
        failure {
            echo "‚ùå Pipeline failed!"
            // You can add failure notifications here
        }
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings!"
        }
    }
}
